//
//  MIMMockSuite.swift
//  swift-mimic
//
//  Created by Salih Karasuluoglu on 27.12.2018.
//

import Foundation

open class MIMMockSuite: MockSuiteConvertible {
    public typealias MockRequest = MIMMockRequest
    
    public let baseUrl: String
    public let bundle: MockSuiteBundle
    
    private var mockRequests: [MockRequest] = []
    
    public required init(
        baseUrl: String = "default",
        bundle: MockSuiteBundle = "Mocks"
    ) {
        self.baseUrl = baseUrl
        self.bundle = bundle
    }
    
    open subscript(request: URLRequest) -> MockRequest {
        if let foundMockRequest = mockRequests.first(where: { $0.isEqual(to: request) }) {
            return foundMockRequest
        }

        /// Simply set path to an empty string since it can't be possible in reality
        let autoGeneratedMockRequest = MockRequest(path: request.url?.path ?? "")
        autoGeneratedMockRequest.httpMethod = request.httpMethod.flatMap { HTTPMethod(rawValue: $0) } ?? .get
        return autoGeneratedMockRequest
    }
    
    open func append(_ newMockRequest: MockRequest) {
        mockRequests.append(newMockRequest)
    }
}

extension MIMMockSuite: Collection {
    public typealias Index = Int
    public typealias Element = MockRequest

    public var startIndex: Index {
        return mockRequests.startIndex
    }

    public var endIndex: Index {
        return mockRequests.endIndex
    }

    public func index(after i: Index) -> Index {
        return mockRequests.index(after: i)
    }

    public subscript (i: Index) -> Element {
        return mockRequests[i]
    }
}

extension MIMMockSuite: CustomStringConvertible {
    public var description: String {
        return mockRequests.description
    }
}
